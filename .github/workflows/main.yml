name: Build Python App for Windows, macOS, and Linux

permissions:
  contents: write
  id-token: write
  issues: write
  pull-requests: write
  packages: write
  
on: [push]

jobs:
  build-linux:
    runs-on: ubuntu-latest  # Используем Linux для сборки Linux-версии
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install pyqt5
          pip install keyboard

      - name: Build app for Linux
        run: |
          pyinstaller --onefile --windowed main.py

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/main

  build-macos:
    runs-on: macos-latest  # Используем macOS для сборки macOS-версии
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install pyqt5
          pip install keyboard

      - name: Build app for macOS
        run: |
          pyinstaller --onefile --windowed main.py

      - name: Upload macOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/main

  build-windows:
    runs-on: windows-latest  # Используем Windows для сборки Windows-версии
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install pyqt5
          pip install keyboard

      - name: Build app for Windows
        run: |
          pyinstaller --onefile --windowed main.py

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/main.exe

  create-release:
    needs: [build-linux, build-macos, build-windows]  # Зависи от всех сборок
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: dist/

      - name: Download macOS build artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: dist/

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: dist/

      - name: Upload Linux artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main
          asset_name: main-linux
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main
          asset_name: main-macos
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/main.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
